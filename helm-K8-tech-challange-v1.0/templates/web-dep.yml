apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: web-app
  name: web-app-{{ .Release.version }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - image: nginxdemos/hello
        name: web-app
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi        
        ports:
        - containerPort: 80


#Example:
        # livenessProbe:
        #     httpGet:
        #       path: /healthz
        #       port: 80
        #     initialDelaySeconds: 15
        #     periodSeconds: 10
        # readinessProbe:
        #     httpGet:
        #       path: /readyz
        #       port: 80
        #     initialDelaySeconds: 20
        #     periodSeconds: 10
        # startupProbe:
        #     httpGet:
        #       path: /
        #       port: 80
        #     initialDelaySeconds: 30
        #     periodSeconds: 10

# Liveness Probe: Checks if the container is alive and healthy. It sends an HTTP GET request to /healthz endpoint of the web server container every 10 seconds, 
# starting after an initial delay of 15 seconds.

# Readiness Probe: Checks if the container is ready to serve traffic. It sends an HTTP GET request to /readyz endpoint of the web server container every 10 seconds, 
# starting after an initial delay of 20 seconds

# Startup Probe: Checks if the container has started successfully. It sends an HTTP GET request to / (root) endpoint of the web server container every 10 seconds, 
# starting after an initial delay of 30 seconds.

# You would need to ensure that your web server application exposes these endpoints (/healthz, /readyz, /) and returns appropriate HTTP status codes to indicate its health and readiness. 
# Adjust the paths, ports, initial delays, and periods as needed based on your application's behavior.